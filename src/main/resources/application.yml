server:
  port: ${SERVER_PORT:8080}
spring:
  config:
    import: optional:file:.env[.properties]
  application:
    name: dockins
  datasource:
    url: ${DOCKINS_DB_URL:jdbc:postgresql://localhost:5432/postgres}
    username: ${DOCKINS_DB_USERNAME:postgres}
    password: ${DOCKINS_DB_PASSWORD:postgres}
  jpa:
    hibernate:
      ddl-auto: update
  jackson:
    property-naming-strategy: SNAKE_CASE
  mail:
    host: ${DOCKINS_MAIL_HOST}
    port: ${DOCKINS_MAIL_PORT}
    username: ${DOCKINS_MAIL_USERNAME}
    password: ${DOCKINS_MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          timeout: 6000
          starttls:
            enable: true
            required: true
    ssl:
      enabled: true
  cache:
    type: simple
  flyway:
    enabled: true                   # Включаем Flyway
    locations: classpath:db/migration  # Путь к папке миграций
    baseline-on-migrate: true        # Позволяет начать миграции на существующей базе
    validate-on-migrate: true        # Проверять, что структура миграций правильная
    out-of-order: false              # Запрещаем накатывать миграции не по порядку
    clean-disabled: true             # Запрещаем удалять все таблицы через Flyway.clean() (очень важно на продакшене!)
    mixed: false                     # Только SQL-миграции одного типа (SQL или Java, но не вместе)
    encoding: UTF-8                  # Кодировка файлов миграций
    table: flyway_schema_history     # Название служебной таблицы

app:
  secret:
    database-encryption-key: ${DOCKINS_DB_ENCRYPTION_KEY:postgrespostgres}
    jwt:
      signature-key: ${DOCKINS_JWT_SIGNATURE_KEY:jwtjwtjwtjwtjwtjwtjwtjwtjwtjwtjwtjwtjwtjwtjwtjwt}
  messages:
    mail:
      enabled: ${DOCKINS_MAIL_ENABLED:true}
      confirm:
        enabled: ${DOCKINS_MAIL_CONFIRMATION_ENABLED:true}
